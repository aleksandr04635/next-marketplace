// prisma/schema.prisma

//datasource db {
//  provider  = "postgresql"
// url  	    = env("DATABASE_URL")
// directUrl = env("DIRECT_URL")
//}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
  // uncomment next line if you use Prisma <5.10
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  storeName             String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?                @default("https://res.cloudinary.com/dqwdfhxgl/image/upload/v1712025676/contacts/mtgn8ph1cyvu5hebxf1x.jpg")
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  categories            Category[]
  products              Product[]
  ordersTo              Order[]                @relation("OrdersToUser")
  ordersFrom            Order[]                @relation("OrdersFromUser")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token]) //only one token for a specific email
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Category {
  id         String     @id @default(uuid())
  userId     String
  user       User       @relation(fields: [userId], references: [id]) //, onDelete: Cascade)
  name       String
  slug       String
  properties Property[]
  //products    Product[] @relation("CategoryToProduct")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  products   Product[]

  @@index([userId])
}

model Property {
  id         String   @id @default(uuid())
  categoryId String // Foreign Key to Product
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  name       String
  slug       String
  values     Value[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([categoryId])
}

model Value {
  id                String           @id @default(uuid())
  propertyId        String // Foreign Key to Product
  property          Property         @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  name              String
  slug              String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  productProperty   productProperty? @relation(fields: [productPropertyId], references: [id])
  productPropertyId String?

  @@index([propertyId])
}

model Product {
  id                String            @id @default(uuid())
  userId            String // Foreign Key to Store
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId        String // Foreign Key to Category
  category          Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  name              String
  slug              String
  description       String
  price             Decimal
  number            Int
  images            Image[] // Relation to Image model
  //orderItems OrderItem[] // Relation to Order model
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  productProperties productProperty[]
  OrderItem         OrderItem[]

  @@index([userId])
  @@index([categoryId])
}

model productProperty {
  id           String   @id @default(uuid())
  productId    String // Foreign Key to Product
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  propertyName String
  propertySlug String
  valueName    String
  valueSlug    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Value        Value[]

  @@index([productId])
}

model Image {
  id        String   @id @default(uuid())
  productId String // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  userToId   String
  userTo     User        @relation("OrdersToUser", fields: [userToId], references: [id], onDelete: Cascade)
  userFromId String
  userFrom   User        @relation("OrdersFromUser", fields: [userFromId], references: [id], onDelete: Cascade)
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([userToId])
  @@index([userFromId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  number    Int
  orderId   String // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
}
